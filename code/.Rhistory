library("DENVfoimap")
library(DENVfoiMap)
RF_obj_optim <- readRDS("~/Documents/COVID/denv_demo.RData")
load("~/Documents/COVID/denv_demo.RData")
# make foi predictions for Brazil
BRA_ID_0 <- 33
BRA_sqr_covariates <- all_sqr_covariates[all_sqr_covariates$ID_0 == BRA_ID_0,]
BRA_predictions <- make_ranger_predictions(RF_obj_optim,
dataset = BRA_sqr_covariates,
covariates_names = all_predictors)
BRA_predictions <- BRA_predictions - foi_offset
BRA_predictions[BRA_predictions < 0] <- 0
BRA_sqr_covariates$p_i <- BRA_predictions
# map it
map_data_df <- map_preprocess(BRA_sqr_covariates, "p_i", parameters)
q_map <- quick_raster_map(pred_df = map_data_df,
my_col = my_col,
ttl = "FOI",
parms = parameters)
q_map
all_sqr_covariates
BRA_sqr_covariates
?make_ranger_predictions
?full_routine_bootstrap
# overlay() not available in velox
tmean <- getData("worldclim",var="tmean",res=10)/10# location of population density data: https://sedac.ciesin.columbia.edu/downloads/data/gpw-v4/gpw-v4-population-density-rev11/gpw-v4-population-density-rev11_2020_2pt5_min_tif.zip
# Headers
source("src/packages.R")
silent.require <- function(x) suppressMessages(require(package=x, character.only=TRUE, quietly=TRUE))
# Load packages that are already installed
packages <- c("rstan",
"zeallot", #src/clean-gadm.R (and because Will likes it)
"raster", "sp", "lubridate", "rgeos", "RColorBrewer", "abind", # worldclim and gadm cleaning
"devtools", # to install GitHub packages (like Lorenzo's)
"matrixStats","data.table","gdata","dplyr","tidyr","EnvStats","scales","tidyverse","dplyr","abind","ggplot2","gridExtra","ggpubr","bayesplot","cowplot","optparse", "lubridate", "zoo", "ggstance", "geofacet", "denstrip", "svglite", "forecast", # Imperial models
"ape", "caper"#, "phytools", "viridis", "plotrix" # Phylogenetics
)
ready <- sapply(packages, silent.require)
# Install missing packages
for(i in seq_along(ready))
if(!ready[i])
install.packages(packages[i], quietly=TRUE, dependencies=TRUE)
# Error out if not all packages installed
ready <- sapply(packages, silent.require)
if(any(!ready))
stop("Cannot install packages", ready[!ready])
# GitHub packages
if(!silent.require("DENVfoiMap")){
install_github("lorecatta/DENVfoiMap", upgrade=FALSE)
if(!silent.require("DENVfoiMap"))
stop("Cannot install DENVfoiMap")
}
if(!silent.require("velox")){ # src/clean-gadm.R and src/worldclim.R
install_github("hunzikp/velox", upgrade=FALSE)
if(!silent.require("velox"))
stop("Cannot install velox")
}
# overlay() not available in velox
tmean <- getData("worldclim",var="tmean",res=10)/10# location of population density data: https://sedac.ciesin.columbia.edu/downloads/data/gpw-v4/gpw-v4-population-density-rev11/gpw-v4-population-density-rev11_2020_2pt5_min_tif.zip
# location of population density data: https://sedac.ciesin.columbia.edu/downloads/data/gpw-v4/gpw-v4-population-density-rev11/gpw-v4-population-density-rev11_2020_2pt5_min_tif.zip
# ^ may need an account to download this directly
#pop_data <- raster("raw-data/gpw-v4-population-density-rev11_2020_2pt5_min_tif/gpw_v4_population_density_rev11_2020_2pt5_min.tif")
pop_data <- raster("raw-data/gpw-v4-population-density-rev11_2020_15_min_tif/gpw_v4_population_density_rev11_2020_15_min.tif")
# location of population density data: https://sedac.ciesin.columbia.edu/downloads/data/gpw-v4/gpw-v4-population-density-rev11/gpw-v4-population-density-rev11_2020_2pt5_min_tif.zip
# ^ may need an account to download this directly
#pop_data <- raster("raw-data/gpw-v4-population-density-rev11_2020_2pt5_min_tif/gpw_v4_population_density_rev11_2020_2pt5_min.tif")
pop_data <- raster("~/Tyrell/raw-data/gpw-v4-population-density-rev11_2020_15_min_tif/gpw_v4_population_density_rev11_2020_15_min.tif")
LMIC <- read.csv("~/Documents/COVID/2020-06-06_v2.csv")
LMIC_Rt <- LMIC[LMIC$compartment == "Rt",]
unique(LMIC_Rt$country)
head(LMIC_Rt)
Afghanistan <- LMIC_Rt[LMIC_Rt$iso3c == "AFG",]
library("ggplot2")
ggplt(Afghanistan, aes(x = date, y = y_mean, col = scenario)) + geom_line()
ggplot(Afghanistan, aes(x = date, y = y_mean, col = scenario)) + geom_line()
LMIC_Rt$date <- as.Date(LMIC_Rt$date)
unique(LMIC_Rt$country)
Afghanistan <- LMIC_Rt[LMIC_Rt$iso3c == "AFG",]
ggplot(Afghanistan, aes(x = date, y = y_mean, col = scenario)) + geom_line()
View(Afghanistan)
unique(LMIC_Rt$iso3c)
unique(LMIC_Rt$version)
unique(LMIC_Rt$iso3c)
test_country <- LMIC_Rt[LMIC_Rt$iso3c == "BRA",]
ggplot(test_country, aes(x = date, y = y_mean, col = scenario)) + geom_line()
test_country <- LMIC_Rt[LMIC_Rt$iso3c == "ZMB",]
ggplot(test_country, aes(x = date, y = y_mean, col = scenario)) + geom_line()
test_country <- LMIC_Rt[LMIC_Rt$iso3c == "UKR",]
ggplot(test_country, aes(x = date, y = y_mean, col = scenario)) + geom_line()
test_country <- LMIC_Rt[LMIC_Rt$iso3c == "AFG",]
ggplot(test_country, aes(x = date, y = y_mean, col = scenario)) + geom_line()
ggplot(test_country, aes(x = date, y = y_mean, col = scenario)) + geom_line() + geom_vline(xintercept = 09-06-2020)
LMIC_Rt$date
ggplot(test_country, aes(x = date, y = y_mean, col = scenario)) + geom_line() + geom_vline(xintercept = 2020-06-09)
unique(LMIC_Rt$iso3c)
test_country <- LMIC_Rt[LMIC_Rt$iso3c == "CAF",]
ggplot(test_country, aes(x = date, y = y_mean, col = scenario)) + geom_line() + geom_vline(xintercept = 2020-06-09)
test_country <- LMIC_Rt[LMIC_Rt$iso3c == "CUB",]
ggplot(test_country, aes(x = date, y = y_mean, col = scenario)) + geom_line() + geom_vline(xintercept = 2020-06-09)
setwd("~/Documents/cov-env-app/code/")
packages <- c(#"rstan", "parallel", "yaml",
#"zeallot", #src/clean-gadm.R (and because Will likes it)
#"raster", "sp", "lubridate", "rgeos", "RColorBrewer", "abind", "exactextractr", "sf", "ncdf4", "countrycode", # worldclim and gadm cleaning
#"plotly", # Tom's plotting things
#"devtools", # to install GitHub packages (like Lorenzo's)
"matrixStats","data.table","gdata","dplyr","tidyr","EnvStats","scales","tidyverse","dplyr","abind","ggplot2","gridExtra","ggpubr","bayesplot","cowplot","optparse", "lubridate", "zoo", "ggstance", "geofacet", "denstrip", "svglite", "forecast", "xtable", "car", "mclust", "lattice", "plot3D"  # Imperial models
)
silent.require <- function(x) suppressMessages(require(package=x, character.only=TRUE, quietly=TRUE))
ready <- sapply(packages, silent.require)
# funtion to subset the data down to US only, and give them
# correct state names.
# need to load the states data for this
c(states, states_data) %<-% readRDS("../data/gadm-states.RDS")
packages <- c(#"rstan", "parallel", "yaml",
#"zeallot", #src/clean-gadm.R (and because Will likes it)
#"raster", "sp", "lubridate", "rgeos", "RColorBrewer", "abind", "exactextractr", "sf", "ncdf4", "countrycode", # worldclim and gadm cleaning
#"plotly", # Tom's plotting things
"devtools", # to install GitHub packages (like Lorenzo's)
"matrixStats","data.table","gdata","dplyr","tidyr","EnvStats","scales","tidyverse","dplyr","abind","ggplot2","gridExtra","ggpubr","bayesplot","cowplot","optparse", "lubridate", "zoo", "ggstance", "geofacet", "denstrip", "svglite", "forecast", "xtable", "car", "mclust", "lattice", "plot3D"  # Imperial models
)
silent.require <- function(x) suppressMessages(require(package=x, character.only=TRUE, quietly=TRUE))
ready <- sapply(packages, silent.require)
# funtion to subset the data down to US only, and give them
# correct state names.
# need to load the states data for this
c(states, states_data) %<-% readRDS("../data/gadm-states.RDS")
packages <- c(#"rstan", "parallel", "yaml",
#"zeallot", #src/clean-gadm.R (and because Will likes it)
"raster", "sp", "lubridate", "rgeos", "RColorBrewer", "abind", "exactextractr", "sf", "ncdf4", "countrycode", # worldclim and gadm cleaning
#"plotly", # Tom's plotting things
"devtools", # to install GitHub packages (like Lorenzo's)
"matrixStats","data.table","gdata","dplyr","tidyr","EnvStats","scales","tidyverse","dplyr","abind","ggplot2","gridExtra","ggpubr","bayesplot","cowplot","optparse", "lubridate", "zoo", "ggstance", "geofacet", "denstrip", "svglite", "forecast", "xtable", "car", "mclust", "lattice", "plot3D"  # Imperial models
)
silent.require <- function(x) suppressMessages(require(package=x, character.only=TRUE, quietly=TRUE))
ready <- sapply(packages, silent.require)
# funtion to subset the data down to US only, and give them
# correct state names.
# need to load the states data for this
c(states, states_data) %<-% readRDS("../data/gadm-states.RDS")
packages <- c(#"rstan", "parallel", "yaml",
"zeallot", #src/clean-gadm.R (and because Will likes it)
"raster", "sp", "lubridate", "rgeos", "RColorBrewer", "abind", "exactextractr", "sf", "ncdf4", "countrycode", # worldclim and gadm cleaning
#"plotly", # Tom's plotting things
"devtools", # to install GitHub packages (like Lorenzo's)
"matrixStats","data.table","gdata","dplyr","tidyr","EnvStats","scales","tidyverse","dplyr","abind","ggplot2","gridExtra","ggpubr","bayesplot","cowplot","optparse", "lubridate", "zoo", "ggstance", "geofacet", "denstrip", "svglite", "forecast", "xtable", "car", "mclust", "lattice", "plot3D"  # Imperial models
)
ready <- sapply(packages, silent.require)
# funtion to subset the data down to US only, and give them
# correct state names.
# need to load the states data for this
c(states, states_data) %<-% readRDS("../data/gadm-states.RDS")
